/**
 * RS485 protocol library. Version 0.9 Beta
 * Adam Baron - vysocan(c) 2011.  
 * 
 * For Atmega168, 328
 * 
 * 0.9 Beta  
 * Tested on two breadboards, sending read data or commands looks fine. 
 * Sending junk random data looks fine. One of many is picked up as general
 * command. I guess when the random 2 bytes matches random xor. No random data is
 * pushed through 2 byte crc.
 *  
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * 
 * Packet structure: 
 * -------------~~~~~~~~~~~~~~~~~~~~~~
 * - A - P - X -  D0 - D63 ~ S0 ~ S0 ~
 * -------------~~~~~~~~~~~~~~~~~~~~~~
 * 
 * - Required fields
 * ~ Data and signature fields
 * A Address - 4 bits form and 4 bits to address.
 *   0  is master
 *   15 is broadcast to all
 *   14 addresses left for other devices
 * 
 * P Packet definition - 2 bits type and 6 bits length.
 *   Flag bit configuration:
 *   FLAG_ACK 3
 *   FLAG_NAK 2
 *   FLAG_CMD 1
 *   FLAG_DTA 0
 *    
 *   Types: CMD - Command - user defined general commands value 0 - 63
 *          DTA - Data - user data length D0 - D63 and CRC S0, S1
 *          ACK, NAK - flags for data, using signature of data packet
 *          
 * X XOR of A and P, for basic transfer safety.
 * 
 * D0 - D63 user data.     
 *                      
 * S0 ~ S0  CRC for user data or signature for ACK, NAK.  
 * 
 *
 * Application notes:
 * Baud rate should be bigger then 9600bps for a 16 MHz crystal, due
 * to stochastic wait for empty line to work properly.
 *       
 */
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <stdlib.h>

#include "NilRS485.h"

// Declare and initialize the semaphore.
static SEMAPHORE_DECL(RS485NewMsg, 0);

// macros
#define output_low(port,pin) port &= ~(1<<pin)
#define output_high(port,pin) port |= (1<<pin)
#define set_input(port,pin) port &= ~(1<<pin)
#define set_output(port,pin) port |= (1<<pin)

#ifndef BAUD_TOL
#   define BAUD_TOL 2
#endif

// both buffers are static global vars in this file. interrupt handlers
// need to access them
static rx_ring_buffer rx_buffer;
static tx_ring_buffer tx_buffer;
// Local static variables
static uint8_t _msg_length, _data_length, _rx_queue, _address;

// RS485 header bits
#define FLAG_ACK 3
#define FLAG_NAK 2
#define FLAG_CMD 1
#define FLAG_DTA 0

// CRC 16 small table computation.
static const uint16_t PROGMEM crcTable16n[16] = { 
  0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 
  0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022 
};




/**
 * Initialize the USART module with the BAUD rate predefined
 * in HardwareSerial.h
 *
 * This may implement passing addresses of registers, like the HardwareSerial
 * class from the Arduino library, but that's not necessary at this point.
 *
 */
NilRS485::NilRS485(rx_ring_buffer *rx_buffer_ptr, tx_ring_buffer *tx_buffer_ptr) {
    _rx_buffer = rx_buffer_ptr;
    _tx_buffer = tx_buffer_ptr;
}

/**
 * Initalize RS485
 * 
 * Set baudrate, 9N1, MPCM
 * enable receiver, transmitter ...
 *    
 */
void NilRS485::begin(unsigned long baud, uint8_t address) {
    set_output(DDRD, 2);   // Assign WriteEnable as output
    output_low(PORTD, 2);   // Disable WriteEnable on RS485 chip   
    _address = address;     // Assign address
    // Tick usec, 11 bits for one byte, _delay_loop_2 executes 4 CPU cycles
    // per iteration. The maximal possible delay is 262.14 ms / F_CPU in MHz.
    _tick = (F_CPU * 11) / (4 * baud);  
    
    // taken from <util/setbaud.h>
    uint8_t use2x = 0;
    uint16_t ubbr =  (F_CPU + 8UL * baud) / (16UL * baud) - 1UL;
    if ( (100 * (F_CPU)) > (16 * (ubbr + 1) * (100 * ubbr + ubbr * BAUD_TOL)) ) {
        use2x = 1;
        ubbr = (F_CPU + 4UL * baud) / (8UL * baud) - 1UL;
    }

    UBRR0L = ubbr & 0xff;
    UBRR0H = ubbr >> 8;
    if (use2x) {
        UCSR0A |= (1 << U2X0);
    } else {
        UCSR0A &= ~(1 << U2X0);
    }

    // Flush buffers
    _tx_buffer->head = _tx_buffer->tail = 0;
    _rx_buffer->head = _rx_buffer->tail = 0;
    _rx_queue = 0;
        
    UCSR0A |= (1<<MPCM0);  // Set MPCM
    UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0) | (1<<UCSZ02);
    // 
    // POZOR UCSRC = (1<<URSEL) pro nastaveni UCSRC 
    //
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
    
    // Bit          7 6 5 4 3 2 1 0
    //              RXCIEn TXCIEn UDRIEn RXENn TXENn UCSZn2 RXB8n TXB8n UCSRnB
    //              R/W R/W R/W R/W R/W R/W R R/W
    //Initial Value 0 0 0 0 0 0 0 0
//    UCSR0B |= (1<<TXEN0);  // Enable Transmitter
//    UCSR0B |= (1<<RXEN0);  // Enable Reciever
//    UCSR0B |= (1<<RXCIE0); // Enable Rx Complete Interrupt
//    UCSR0B |= (1<<UCSZ02); // 9 Bit
// UCSRC is set by default

}


/**
 * CRC16 small table implementation
 */
uint16_t NilRS485::compute_crc(const char* data, uint16_t size) { 
  uint16_t crc = 0x0000;
  // Fold bytes into CRC 
  const char* p = data; 

  while (size--) { 
    crc = (crc << 4) ^ (pgm_read_word(&crcTable16n[(crc >> 12) ^ ((*p) >> 4)])); 
    crc = (crc << 4) ^ (pgm_read_word(&crcTable16n[(crc >> 12) ^ ((*p) & 0x0f)])); 
    p++; 
  }; 
  return crc; 
} 
/**
 * Read procedure
 */
uint8_t NilRS485::read(void) {
  return _rx_buffer->buffer[_rx_buffer->tail++];
} 
/**
 * Read message
 */
int8_t NilRS485::msg_read(RS485_msg *msg) {
  if (_rx_queue == 0) return 0; // no message
  _rx_queue--; 
  
  uint8_t tmp_head;
  
  // Read header
  tmp_head = read();
  msg->address = tmp_head >> 4;  // from address
  tmp_head = read();
  msg->data_length = tmp_head & 0b00111111;
  msg->ctrl = tmp_head >> 6;
  tmp_head = read(); // compare crc of header is done in interrupt
  
  // Read data and data crc, or ACK NAK signature 
  // ACK NAK signature has 2 bytes
  if (msg->ctrl != FLAG_CMD) {
    // Read data_length part
    for(tmp_head = 0; tmp_head < msg->data_length; tmp_head++) {
      msg->buffer[tmp_head] = read();
    }
    // Read MSG_CRC_SIZE part
    for(tmp_head = 0; tmp_head < MSG_CRC_SIZE; tmp_head++) {
      msg->buffer[tmp_head + msg->data_length] = read();
    }
  }
  // Compare data crc
  if (msg->ctrl == FLAG_DTA) {
    uint16_t tmp_crc = compute_crc(msg->buffer, msg->data_length);
    if (((tmp_crc>>8) != msg->buffer[msg->data_length]) ||
       ((tmp_crc & 0b11111111) != msg->buffer[msg->data_length+1])) return 2; // crc not valid
  }
      
  return 1;
}


/**
 * Receive handler
 */
NIL_IRQ_HANDLER(USART_RX_vect) {
  /* On AVR this forces compiler to save registers r18-r31.*/
  NIL_IRQ_PROLOGUE();
  /* Nop on AVR.*/
  nilSysLockFromISR();
  
  if ((rx_buffer.head + 1) == rx_buffer.tail) return; // full, do not receive anything 

  uint8_t status = UCSR0A; // Get status and 9th bit, then data from buffer
  uint8_t datah  = UCSR0B; 
  uint8_t datal  = UDR0;
  uint8_t _tmp;
  
  /* If error, return -1 */
  //if ( status & (1<<FE0)|(1<<DOR0)) output_high(PORTB, 5);
  //if ( status & (1<<FE0)) output_high(PORTB, 5);    
  // buffer overflow!
  
  datah = (datah >> RXB80) & 0x01; // Filter the 9th bit to 1 or 0
    // Check 9th bit
    if (datah){         
      // Address frame in middle tranmission = error or contention
      if (!(status & (1 << MPCM0))) { // MPCM0 bit is not set
	UCSR0A |= (1<<MPCM0); // set MPCM
	rx_buffer.head -= _msg_length; // return head
	return; // escape  
      } else {
	_tmp = datal & 0b00001111;
	// Our address or broadcast, we start receiveing data
	if ((_tmp == _address) || (_tmp == 15)) {
	  UCSR0A &= ~(1<<MPCM0); // clear MPCM
	  _msg_length = 1;
	  _data_length = 0;
	}          
	else {
	  return; // escape 
	}
      }        
    } else { 
      _msg_length++;
      if (_msg_length == 2) { // control byte
	// We are receiveing data and MSG_CRC_SIZE
	// ACK NAK data is MSG_CRC_SIZE bytes
	_tmp = (datal >> 6);
	if (_tmp != FLAG_CMD) _data_length = (datal & 0b00111111) + MSG_CRC_SIZE;
	if ((_tmp != FLAG_DTA) && ((datal & 0b00111111) != 0)) { // ACK NAK CMD data length must be 0
	  UCSR0A |= (1<<MPCM0); // set MPCM
	  rx_buffer.head -= 1;  // return head, but last byte is not stored yet
	  return; // escape  
	  }           
      }
      if (_msg_length == 3) { // XOR check
	  if ((rx_buffer.buffer[rx_buffer.head-2] ^ rx_buffer.buffer[rx_buffer.head-1]) != datal){
	    // error
	    UCSR0A |= (1<<MPCM0); // set MPCM
	    rx_buffer.head -= 2;  // return head, but last byte is not stored yet
	    return; // escape 
	  } 
      }
      if (_msg_length == MSG_HEADER_SIZE + _data_length) { // we have complete message
	  _rx_queue++; 
	  UCSR0A |= (1<<MPCM0); // set MPCM
	  /* Signal handler thread. */
	  nilSemSignalI(&RS485NewMsg);
	}  
    }
  rx_buffer.buffer[rx_buffer.head] = datal;  // save byte
  rx_buffer.head++;                          // advance head, watch out XOR !!!          
  
  /* Nop on AVR.*/
  nilSysUnlockFromISR();
  /* Epilogue performs rescheduling if required.*/
  NIL_IRQ_EPILOGUE();
}


/**
 * Data Register Empty Handler
 */
NIL_IRQ_HANDLER(USART_UDRE_vect) {
  /* On AVR this forces compiler to save registers r18-r31.*/
  NIL_IRQ_PROLOGUE();
  /* Nop on AVR.*/
  nilSysLockFromISR();

  if (tx_buffer.head == tx_buffer.tail) {
      UCSR0B &= ~(1<<UDRIE0); // Buffer is empty, disable the interrupt
      tx_buffer.head = tx_buffer.tail = 0;
  } else {
      // Address or data  
      if (tx_buffer.tail == 0) {
	UCSR0B |= (1<<TXB80);  //set
      } else {
	UCSR0B &= ~(1<<TXB80); //clear
      }
      UDR0 = tx_buffer.buffer[tx_buffer.tail];
      tx_buffer.tail++;
  }
  
  /* Nop on AVR.*/
  nilSysUnlockFromISR();
  /* Epilogue performs rescheduling if required.*/
  NIL_IRQ_EPILOGUE();
}

/**
 * Transmit Complete Interrupt Handler
 *  
 * Automatically cleared when the interrupt is executed. 
 */
NIL_IRQ_HANDLER(USART_TX_vect) {
  /* On AVR this forces compiler to save registers r18-r31.*/
  NIL_IRQ_PROLOGUE();
  /* Nop on AVR.*/
  nilSysLockFromISR();  
  
  output_low(PORTD, 2);    // Disable WriteEnable on RS485 chip  
  
  /* Nop on AVR.*/
  nilSysUnlockFromISR();
  /* Epilogue performs rescheduling if required.*/
  NIL_IRQ_EPILOGUE();  
}

void NilRS485::write(uint8_t data) {  
  // Advance the head, store the data    
  _tx_buffer->buffer[_tx_buffer->head] = data;
  _tx_buffer->head++;
}


/**
 * Prepare and write message
 *   
 */
int8_t NilRS485::msg_write(RS485_msg *msg) {
  if (tx_buffer.head != tx_buffer.tail) return 0; // Transmitter is busy;
  
  uint8_t tmp_head1, tmp_head2;

  _tx_buffer->head = _tx_buffer->tail = 0; // Null buffer head and tail 
    
  // Write header
  tmp_head1 = _address << 4;               // Our address
  tmp_head1 = tmp_head1 + msg->address;    // To address
  write(tmp_head1);
  // Make sure that ACK NAK signature is only MSG_CRC_SIZE (2) bytes
  // Make sure that CMD data_length is 0 bytes
  if (msg->ctrl != FLAG_DTA) msg->data_length = 0;
  tmp_head2 = msg->ctrl << 6;
  tmp_head2 = tmp_head2 + msg->data_length;
  write(tmp_head2);
  write(tmp_head1 ^ tmp_head2);            // write XOR header
  
  // Write data 
  if (msg->ctrl != FLAG_CMD) {
    for(int i = 0; i < (msg->data_length); i++) {
      write(msg->buffer[i]);
    }
    if (msg->ctrl == FLAG_DTA) { // data CRC
      int16_t tmp_crc = compute_crc(msg->buffer, msg->data_length);
      write(tmp_crc >> 8);
      write(tmp_crc & 0b11111111);
    } else { // ACK NAK signature 
      write(msg->buffer[0]);
      write(msg->buffer[1]);
    }
  }
  
  // wait for any incomming message to finish
  tmp_head1 = 0;
  while (!(UCSR0A & (1 << MPCM0))) { 
    _delay_loop_2(_tick); // delay 1 character 
    tmp_head1++;
    if ( tmp_head1 == LINE_READY_TIME_OUT) {
      _tx_buffer->head = _tx_buffer->tail = 0; // Null buffer head and tail
      return 2; // line is too busy, quit
      } 
  }
  // wait for line ready
  UCSR0B &= ~(1<<RXCIE0);  // Disable Rx Complete Interrupt
  UCSR0A &= ~(1<<MPCM0);   // Disable MPCM
  tmp_head1 = 0;
  do {
    tmp_head2 = UDR0; //just empty rx buffer 
    _delay_loop_2(_tick * ((random() % 15) + 1)); // random time, max is 16 nodes
    tmp_head1++;
    if ( tmp_head1 == LINE_READY_TIME_OUT) {
      _tx_buffer->head = _tx_buffer->tail = 0; // Null buffer head and tail
      UCSR0A |= (1<<MPCM0);  // Enable MPCM
      UCSR0B |= (1<<RXCIE0); // Enable Rx Complete Interrupt
      return 3; // line is too busy, quit
      } 
  } while (UCSR0A & (1<<RXC0)); // no char received, line is free
  
  UCSR0A |= (1<<MPCM0);   // Enable MPCM
  UCSR0B |= (1<<RXCIE0);  // Enable Rx Complete Interrupt
  // end of wait for line ready
  // Go for write
  //output_high(PORTB, 5);  // Temp led 
  output_high(PORTD, 2);  // Enable WriteEnable on RS485 chip                       
  UCSR0B |= (1<<UDRIE0);  // Enable Data Register Empty interrupt, start transmitting
  UCSR0B |= (1<<TXCIE0);  // Enable Transmit Complete interrupt (USART_TXC) 
  return 1;
}

/** Sleep while waiting for new message.
 * @note This function should not be used in the idle thread.
 * @return true if success or false if overrun or error.
 */
 bool nilWaitRS485NewMsg() {
  // Idle thread can't sleep.
 	if (nilIsIdleThread()) return false;
 	if (nilSemWaitTimeout(&RS485NewMsg, TIME_IMMEDIATE) != NIL_MSG_TMO) return false;
  nilSemWait(&RS485NewMsg);
  return true;
 }

NilRS485 RS485(&rx_buffer, &tx_buffer);